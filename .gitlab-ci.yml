---
stages:
  - static
  - test
  - docker

cache:
  paths:
    - vendor

# Jobs that start with a period are disabled
# This is just a template, to be used further below in the individual job definitions
.setup_apt: &setup_apt
  before_script:
    # Export APT env vars to cache packages archives and lists based on the current working directory
    - export APT_DIR=$CI_PROJECT_DIR/vendor/apt && export APT_ARCHIVES_DIR=$APT_DIR/archives && export APT_LISTS_DIR=$APT_DIR/lists
    # Configure APT: Only install necessary packages, set cache location
    - printf
      "apt::install-recommends 0;\n
      apt::install-suggests 0;\n
      dir::cache::archives ${APT_ARCHIVES_DIR};\n
      dir::state::lists ${APT_LISTS_DIR};\n"
      >> /etc/apt/apt.conf.d/99custom
    # Ensure the custom APT directory does exist
    - mkdir -p {${APT_ARCHIVES_DIR},${APT_LISTS_DIR}}/partial
    - apt-get update -qq
    # To keep things DRY, use an env var to handle packages to be installed via APT
    - apt-get install -qq -y $APT_INSTALL_PACKAGES

.test_ruby: &test_ruby
  variables:
    APT_INSTALL_PACKAGES: gnupg2 libgpgme11-dev libsqlite3-dev eatmydata
    # Use quotes so the following does get recognized as a string, not as a bool
    CHECK_CODE_COVERAGE: "true"
  <<: *setup_apt
  script:
    - eatmydata gem install bundler --no-ri --no-rdoc
    - eatmydata bundle install --jobs $(nproc) --path vendor
    - rm /dev/random && ln -s /dev/urandom /dev/random
    - SCHLEUDER_ENV=test SCHLEUDER_CONFIG=spec/schleuder.yml eatmydata bundle exec rake db:init
    - eatmydata bundle exec rspec

changelog:
  image: debian:unstable
  variables:
    APT_INSTALL_PACKAGES: ca-certificates git
  <<: *setup_apt
  script:
    # Ensure we work with the latest master
    - git fetch origin master:master
    # Compare the master and current branch using their common ancestors
    # to check if the changelog was edited
    - if git diff --exit-code --quiet master...HEAD -- CHANGELOG.md; then
        echo "No CHANGELOG edit found, please verify manually";
        exit 1;
      fi
  stage: static
  allow_failure: true
  except:
    refs:
      - master

codespell:
  image: debian:unstable
  variables:
    APT_INSTALL_PACKAGES: codespell
  <<: *setup_apt
  script:
    # Run codespell to check for spelling errors, using a config with ignored words, skipping files 
    # (German translations, v2 list configs and code of installed dependencies) leading to false positives,
    # ignoring warnings about binary files and, finally, checking file names as well.
    - codespell -I utils/ci/codespell/ignored_words.txt -S de.yml,list.conf,vendor -q 2 -f
  stage: static

ruby:2.1:
  image: ruby:2.1
  <<: *test_ruby
ruby:2.2:
  image: ruby:2.2
  <<: *test_ruby
ruby:2.3:
  image: ruby:2.3
  <<: *test_ruby
ruby:2.4:
  image: ruby:2.4
  <<: *test_ruby
ruby:2.5:
  image: ruby:2.5
  <<: *test_ruby

bundler:audit:
  image: ruby:2.5
  only:
    - schedules
  script:
    - gem install bundler-audit --no-ri --no-rdoc
    - bundle install --jobs $(nproc) --path vendor
    - bundle-audit update
    - bundle-audit check

build_docker_image:
  stage: docker
  # Only build packages for https://0xacab.org/schleuder/schleuder, not
  # for forks
  only:
    - master@schleuder/schleuder
    - tags@schleuder/schleuder
  tags:
    - docker-in-docker
  image: docker:latest
  services:
    - docker:dind
  variables:
    IMAGE_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME
  script:
    - docker build -t $IMAGE_TAG .
    # Disable bash history to prevent the $CI_JOB_TOKEN to be recorded and saved
    - unset HISTFILE
    - echo $CI_JOB_TOKEN | docker login -u gitlab-ci-token --password-stdin $CI_REGISTRY
    - docker push $IMAGE_TAG
